#!/usr/bin/env bash

######
# Shwain is a Mark Twain for bash (i.e. logger).
# It aims to be a partial functional clone of https://github.com/nir0s/wryte.
#
# Usage:
#   shwain info message key1=value1 key2=value2 --json
#   shwain event "Killing process" pid="$$"
#   shwain error WOOT! errorlevel=$errorlevel --simple
######

###
# Color mapping for severity levels.
# http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
###

declare -r VERSION="0.1.0"

declare -r USAGE="Usage: $(basename "$0") [OPTIONS] LEVEL MESSAGE [OBJECTS]...

Options:
  -j, --json         Use the JSON logger formatter instead of the console one
  -n, --name TEXT    Change the default logger's name
  --no-color         Disable coloring in console formatter
  --simple           Log only message to the console
  --enrich           Enrich with additional metadata like hostname, pid, etc..
  --aws              Enrich with additional, AWS specific metadata
  -h, --help         Show this message and exit.
"

declare -r -A COLOR_MAPPING=(
  ["DEBUG"]="0;36"    # CYAN
  ["INFO"]="0;32"     # GREEN
  ["WARNING"]="1;33"  # YELLOW
  ["WARN"]="1;33"     # YELLOW
  ["ERROR"]="0;31"    # RED
  ["CRITICAL"]="1;31" # BRIGHT RED
  ["EVENT"]="1;32"    # BRIGHT GREEN
)

declare -r -A LEVEL_MAPPING=(
  ["DEBUG"]=1
  ["INFO"]=2
  ["WARNING"]=3
  ["WARN"]=3
  ["ERROR"]=4
  ["CRITICAL"]=5
  ["EVENT"]=6
)

declare -r EFFECTIVE_LOG_LEVEL=${EFFECTIVE_LOG_LEVEL:-${LEVEL_MAPPING[DEBUG]}}

function log.info() {
  local -r message="$1"
  shift
  local kvs=("$@")

  _shwain.log "INFO" "$message" kvs
}

function log.debug() {
  local -r message="$1"
  shift
  local kvs=("$@")

  _shwain.log "DEBUG" "$message" kvs
}

function log.warn() {
  local -r message="$1"
  shift
  local kvs=("$@")

  _shwain.log "WARNING" "$message" kvs
}

function log.warning() {
  local -r message="$1"
  shift
  local kvs=("$@")

  _shwain.log "WARNING" "$message" kvs
}

function log.error() {
  local -r message="$1"
  shift
  local kvs=("$@")

  _shwain.log "ERROR" "$message" kvs
}

function log.critical() {
  local -r message="$1"
  shift
  local kvs=("$@")

  _shwain.log "CRITICAL" "$message" kvs
}

function log.event() {
  local -r message="$1"
  shift
  local kvs=("$@")

  _shwain.log "EVENT" "$message" kvs
}

function ec2_attr() {
  local attribute="$1"

  response="$(curl -s http://169.254.169.254/latest/meta-data/$attribute)"
  echo $response
}

function _shwain.log() {
  local level="${1^^}"
  local -r message="$2"
  local -n kv="$3"

  local -r json="${4:-$SHWAIN_JSON}"
  local -r no_color="${5:-$SHWAIN_NO_COLOR}"
  local -r simple="${6:-$SHWAIN_SIMPLE}"
  local -r enrich="${7:-$SHWAIN_ENRICH}"
  local -r aws="${8:-$SHWAIN_AWS}"

  local name="${9:-$SHWAIN_NAME}"; name="${name:-SHWAIN}"
  local log=''
  local type="log"

  local -r pid="$$"
  local -r hostname=$(hostname)
  local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"

  local output_stream

  if [ "$level" == "WARN" ]; then level="WARNING"; fi

  # Determine whether output stream should be stdout or stderr
  if [ "$level" == "WARNING" ] || [ "$level" == "ERROR" ] || [ "$level" == "CRITICAL" ]; then
    output_stream=2
  else
    output_stream=1
  fi

  if [[ ! "${!LEVEL_MAPPING[@]}" == *"${level}"* ]]; then
    echo "Unknown level. Please use one of [${!LEVEL_MAPPING[@]}] (hint: you can use lowercase)"
    exit 1
  fi
  # Assert log level
  (( ${LEVEL_MAPPING[${level}]} >= $EFFECTIVE_LOG_LEVEL )) || return 0

  # We want the type field to be event only if the level is event.
  if [ "$level" == "EVENT" ]; then type="event"; fi

  local expanded_kv='  '
  # Enrich kvs
  if [ ! -z $enrich ]; then
    kv+=("pid=$pid" "hostname=$hostname" "type=$type")

    if [ ! -z "$aws" ]; then
      local -r ec2_instance_id=$(ec2_attr "instance-id")
      if [ ! -z "$ec2_instance_id" ]; then
        local -r ec2_instance_type=$(ec2_attr "instance-type")
        local -r ec2_region=$(ec2_attr "placement/availability-zone")
        local -r ec2_ipv4=$(ec2_attr "local-ipv4")

        kv+=(
          "ec2_instance_id=$ec2_instance_id"
          "ec2_instance_type=$ec2_instance_type"
          "ec2_region=$ec2_region"
          "ec2_ipv4=$ec2_ipv4"
        )
      fi
    fi
  fi

  for ((i = 0; i < ${#kv[@]}; i++))
  do
    expanded_kv="$expanded_kv"$'\n'"  ${kv[$i]}"
  done

  if [ ! -z "$json" ]; then
    kv+=("timestamp=$timestamp" "name=$name" "level=$level")
    # Holy shit this is disgusting. Also, can't pass json as a field.
    # It's still parsable by jq but still.. oi.
    # TODO: You know.. make this.. code-not-shit.
    printf '{\n'
    # For each key value pair
    for ((i = 0; i < ${#kv[@]}; i++))
    do
      # split it by `=`
      IFS='=' read -ra "pair" <<< "${kv[$i]}"
      printf "  \"${pair[0]}\": \"${pair[1]}\",\n"
      expanded_message="$expanded_message"$'\n'"  $i"
    done

    printf "  \"message\": \"${message}\"\n"
    printf '}'
  else
    if [ -z "$simple" ]; then
      if [ -z "$no_color" ]; then
        level="\e[${COLOR_MAPPING[${level^^}]}m${level}\e[0m"
        timestamp="\e[32m${timestamp}\e[0m"  # Green
        name="\e[35m${name}\e[0m"  # Purple
      fi
      log="$timestamp - $name - $level - ${message} ${expanded_kv}"
    else
      log="$message ${expanded_kv}"
    fi
  fi

  echo -e "$log" >&${output_stream}
}

function _main() {
  getopt --test > /dev/null
  if [[ $? -ne 4 ]]; then
    echo "I’m sorry, `getopt --test` failed in this environment."
    exit 1
  fi

  OPTIONS=hn:je
  LONGOPTIONS=simple,name:,json,no-color,help,enrich,aws

  # Temporarily store output to be able to check for errors
  # e.g. use “--options” parameter by name to activate quoting/enhanced mode
  # pass arguments only via -- "$@" to separate them correctly
  PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")

  if [[ $? -ne 0 ]]; then
      # e.g. $? == 1
      #  then getopt has complained about wrong arguments to stdout
      exit 2
  fi

  # Read getopt’s output this way to handle the quoting right:
  eval set -- "$PARSED"

  while true; do
    case "$1" in
      -j|--json)
        json=y
        shift
        ;;
      -n|--name)
        name="$2"
        shift
        ;;
      --no-color)
        no_color=y
        shift
        ;;
      --simple)
        simple=y
        shift
        ;;
      -e|--enrich)
        enrich=n
        shift
        ;;
      --aws)
        aws=n
        shift
        ;;
      -h|--help)
        echo "$USAGE"
        exit 0
        ;;
      --)
        shift
        break
        ;;
    esac
  done

  if [ $# -le 1 ]
    then
      echo "$USAGE" >&2

      echo "You must at least provide two arguments: i.e shwain LEVEL MESSAGE"
      exit 1
  fi

  # Assign level and message from left-over arguments and then shift
  # so that `kvs` contains only the key value pairs.
  local -r level="$1"
  local -r message="$2"
  shift; shift
  local kvs=("$@")

  _shwain.log "$level" "$message" kvs "$json" "$no_color" "$simple" "$enrich" "$aws" "$name"
}

# Only run main if not sourced.
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _main "$@"
fi
